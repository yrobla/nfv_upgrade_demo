---
- name: Initial vnfm state
  uri:
    url: "http://{{ ip }}:5000/vnfm/create"
    method: GET
    return_content: yes

- name: Initial vnf state
  uri:
    url: "http://{{ ip }}:5000/vnfm/vnf-create"
    method: GET
    return_content: yes

- name: Get vnfm state
  uri:
    url: "http://{{ ip }}:5000/vnfm/state"
    method: GET
    return_content: yes
  register: vnfm_state

- name: Debug vnfm_state
  debug: var=vnfm_state.content

- name: Get vnfs on running compute node
  uri:
    url: "http://{{ ip }}:5000/vnfm/get-vnfs"
    method: POST
    return_content: yes
    body: "compute-1"
  register: vnfs

- name: Debug vnfs from compute node
  debug: var=vnfs.content

## TODO: change host ip to vnf's address
- name: Get vnf state on running compute node
  uri:
    url: "http://{{ ip }}:5000/vnfm/vnf-state"
    method: POST
    return_content: yes
    body: "{{ inner_item.value }}"
  with_dict: vnfs.content
  loop_control:
    loop_var: inner_item
  register: vnf_state

#- name: Debug vnf_state
#  debug: var={{ inner_item.content }}
#  with_items: "{{ vnf_state.results }}"
#  loop_control:
#    loop_var: inner_item

- name: Debug vnf_state
  debug: var=vnf_state.results[0].content

## TODO: change to POST method and add vnf ip as parameter
- name: Switch vnf state on running compute node to standby
  uri:
    url: "http://{{ ip }}:5000/vnfm/vnf-switch"
    method: POST
    return_content: yes
    body: "{{ inner_item.value }}"
  with_dict: vnfs.content
  loop_control:
    loop_var: inner_item
  when: vnf_state.results[0].content | search('active')

- name: Get paired vnf
  uri:
    url: "http://{{ ip }}:5000/vnfm/get-pair-vnfs"
    method: POST
    return_content: yes
    body: "{{ inner_item.value }}"
  with_dict: vnfs.content
  loop_control:
    loop_var: inner_item
  when: vnf_state.results[0].content | search('active')
  register: vnf_pair

## TODO: change host ip to paired vnf's address
- name: Switch the paired vnf state to active
  uri:
    url: "http://{{ ip }}:5000/vnfm/vnf-switch"
    method: POST
    return_content: yes
    body: "{{ inner_item.value }}"
  with_dict: vnf_pair.results[0].content
  loop_control:
    loop_var: inner_item
  when: vnf_state.results[0].content | search('active')
#  when: "vnf_state.results[{{inner_item}}].content | search('active')"
#  with_items: [0,1]
#  loop_control:
#    loop_var: inner_item
